use ::java::server::util::block_state::BlockState
use ::java::server::util::inventory::InventoryItem
use ::java::assets::model::ItemTransformType

struct DisplayBase {
	...super::EntityBase,
	/// Transformation applied to model (after normal entity orientation). Defaults to identity. Interpolated.
	/// For an easy GUI, check out [Misode's tool](https://misode.github.io/transformation/).
	///
	/// The value is stored in decomposed object form for interpolation & ease-of-use,
	/// Supports storing a non-canonical matrix form describing a row-major matrix, is automatically decomposed by the game with a performance cost.
	///
	/// The matrix takes the following form:
	/// ```js
	/// [ 
	/// 	s0, s1, s2, tx,
	/// 	s3, s4, s5, ty,
	/// 	s6, s7, s8, tz,
	/// 	i0, i1, i2, w
	/// ]
	/// ```
	/// Where:
	///  - `i0`-`i2`: Ignored values, these can be anything, but the game will ignore the values.
	///  - `w`: This value is used as a divisor of all other values (except `i0`-`i2`). i.e. all the other values get divided by `w` before doing any further calculations.
	///  - `tx`, `ty`, `tz`: Translation value, this is used directly as the `transformation.translation` after dividing by `w`. i.e. `transformation:{translation:[tx/w, ty/w, tz/w]}`.
	///  - `s0`-`s8`: After dividing each element by `w`, this top left 3x3 of the matrix is passed through the [Singular Value Decomposition](https://en.wikipedia.org/wiki/Singular_value_decomposition) algorithm to extract the `transformation.left_rotation`, `transformation.scale`, and `transformation.right_rotation`. The exact values of this decomposition are difficult to predict.
	transformation?: (
		#[canonical] struct {
			/// Translation in [x, y, z].
			translation: [float] @ 3,
			/// Using this rotation is enough for most transformations.
			left_rotation: Rotation,
			/// For more complex transformations.
			right_rotation: Rotation,
			/// Scale in [x, y, z].
			scale: [float] @ 3,
		} |
		([float] @ 16) | 
	),
	/// Size of shadow. Defaults to 0 (no shadow). Interpolated.
	shadow_radius?: float @ 0..,
	/// Strength of the shadow. Controls the opacity of the shadow as a function of distance to block below. Defaults to 1. Interpolated.
	shadow_strength?: float @ 0..1,
	/// Ticks after the next client tick to wait until starting the interpolation.
	/// Info:
	/// All interpolated properties are part of a single interpolation set.
	/// Any update to an interpolated property will cause all values of the interpolation set to be saved as "current".
	/// - Data command executions that do not change value of property (even if it's present in NBT) do not count as updates.
	/// - Updates are synchronized to clients at most once per tick, so multiple updates within command will still count as single update.
	/// Previous current values are saved as "previous".
	/// If interpolation is enabled, entity will transition between "previous" and "current" values over time.
	start_interpolation?: int @ -1..,
	/// Ticks the interpolation should take to complete.
	interpolation_duration?: int @ 0..,
	/// How long in game ticks the entity takes to interpolate from it's starting location to it's destination when teleported. Defaults to 0 (no interpolation).
	#[since="1.20.2"]
	teleport_duration?: int @ 0..59,
	/// Controls if model should pivot to face player when rendered. Defaults to `fixed`.
	billboard?: enum(string) Billboard {
		/// No rotation.
		Fixed = "fixed",
		/// Pivot around vertical axis.
		Vertical = "vertical",
		/// Pivot around horizontal axis.
		Horizontal = "horizontal",
		/// Pivot around both axes.
		Center = "center",
	},
	/// When defined, overrides light values used for rendering. Omitted by default (which means rendering uses values from entity position).
	brightness?: struct {
		/// Value of skylight.
		sky: int @ 0..15,
		/// Value of block light.
		block: int @ 0..15,
	},
	/// Maximum view range of this entity. Actual distance depends on client-side render distance and entity distance scaling. Default value 1.0 (roughly the same as fireball).
	view_range?: float @ 0..,
	/// Describe width of culling bounding box.
	/// Bounding box spans vertically y to y+height and horizontally width/2 in all directions from entity position.
	/// If field is set to 0, culling is disabled. Defaults to 0.
	width?: float @ 0..,
	/// Describe height of culling bounding box.
	/// Bounding box spans vertically y to y+height and horizontally width/2 in all directions from entity position.
	/// If field is set to 0, culling is disabled. Defaults to 0.
	height?: float @ 0..,
	/// Override glow border color. If field is set to 0, uses team color. Defaults to 0.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	glow_color_override?: (0 | #[color="composite_rgb"] int),
}

type Rotation = (
	// Quaternion form (used for saving) in [x, y, z, w].
	[float] @ 4 |
	// Axis-angle form.
	AxisAngle |
)

struct AxisAngle {
	/// Local position of the axis in [x, y, z].
	axis: [float] @ 3,
	/// Angle to rotate around axis in radians.
	angle: float,
}

dispatch minecraft:entity[block_display] to struct BlockDisplay {
	...DisplayBase,
	/// Block state to display.
	/// Does display most block entities (eg. Chests, Beds, Furnaces, etc).
	/// Does not display specially rendered block entities (eg. The bell in a bell block, an end gateway, the book on an enchantment table, a banner, a sign, etc).
	block_state?: BlockState,
}

dispatch minecraft:entity[item_display] to struct ItemDisplay {
	...DisplayBase,
	/// Item stack to display.
	item?: InventoryItem,
	/// Describes item model transform applied to item (as defined in `display` section in model JSON). Defaults to `fixed`.
	item_display?: ItemTransformType,
}
